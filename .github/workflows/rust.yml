name: Rust

on:
  push:
    branches: [ "*" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "*" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libpq-dev libmysqlclient-dev
      - name: Install Rust
        run: |
          rustup update stable
          rustup default stable
          rustup component add rustfmt clippy
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Run clippy
        run: cargo clippy -- -D warnings

  test:
    name: Test
    needs: check
    runs-on: ubuntu-latest
    services:
      # MySQL service container for tests
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: certs
          MYSQL_USER: ocsp
          MYSQL_PASSWORD: ocsp
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      # PostgreSQL service container for tests
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: ocsp
          POSTGRES_PASSWORD: ocsp
          POSTGRES_DB: certs
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        rust: [stable, beta]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libpq-dev libmysqlclient-dev
      - name: Install Rust
        run: |
          rustup update ${{ matrix.rust }}
          rustup default ${{ matrix.rust }}
      - name: Create test config
        run: |
          echo 'cachedays = 3
          db_type = "mysql"
          dbip = "127.0.0.1"
          port = 9000
          timeout = 10
          dbuser = "ocsp"
          dbpassword = "ocsp"
          dbname = "certs"
          cachefolder = "./cache/"
          itcert = "test_files/cert.pem"
          itkey = "test_files/key.pem"
          revocextended = false
          caching = false
          create_table = true' > config.toml
          mkdir -p cache
      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose

  build:
    name: Build Linux
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libpq-dev libmysqlclient-dev
      - name: Install Rust
        run: |
          rustup update stable
          rustup default stable
      - name: Build release
        run: cargo build --release --verbose
      - name: Set version
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      - name: Create tarball
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          cd target/release
          tar -czvf ocsp-server-${{ env.VERSION }}-linux-x86_64.tar.gz ocsp-server
          cd ../..
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ocsp-server-linux
          path: target/release/ocsp-server
      - name: Upload tarball artifact
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: ocsp-server-linux-tarball
          path: target/release/ocsp-server-${{ env.VERSION }}-linux-x86_64.tar.gz

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Get version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      - name: Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: ocsp-server-linux
          path: ./
      - name: Download Linux tarball
        uses: actions/download-artifact@v4
        with:
          name: ocsp-server-linux-tarball
          path: ./
      - name: Make executable
        run: chmod +x ocsp-server
      - name: Rename binary
        run: mv ocsp-server ocsp-server-${{ env.VERSION }}-linux-x86_64
      - name: Extract changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract content between the latest version header and the next version header
            CHANGELOG=$(awk "/^## \[${{ env.VERSION }}\]/ {flag=1;next} /^## \[/ {flag=0} flag" CHANGELOG.md | tr -d '\r')
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="Release version ${{ env.VERSION }}"
            fi
            echo "CHANGELOG<<EOF" >> $GITHUB_ENV
            echo "$CHANGELOG" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "CHANGELOG=Release version ${{ env.VERSION }}" >> $GITHUB_ENV
          fi
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ocsp-server-${{ env.VERSION }}-linux-x86_64
            ocsp-server-${{ env.VERSION }}-linux-x86_64.tar.gz
          body: ${{ env.CHANGELOG }}
          draft: false
          prerelease: false
